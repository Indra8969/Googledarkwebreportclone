<!DOCTYPE html>
<html>
    <head>
        <meta http-equiv="content-type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title></title>
        <style type="text/css" media="all">
        body{
            margin: 0;
            padding: 0;
            width: 100vw;
            height: 100dvh;
            box-sizing: border-box;
        }
        canvas{
            width: 100vw;
            height: 100dvh;
            margin: 0px;
            padding: 0px;
            display: block;
        }
        h3{
            position: fixed;
            top: 0px;
            left: 20px;
        }
        </style>
    </head>
    <body>
        <canvas id="canvas"></canvas>
        <h3>00</h3>
    </body>
    <script type="text/javascript" charset="utf-8">
        var body = document.querySelector('body')
        var canvas = document.querySelector('canvas')
        var c = canvas.getContext('2d')
        canvas.width = innerWidth 
        canvas.height = innerHeight 
       
       var ball = {
           x: 100,
           y: 20,
           radius: 15,
           vx: 4,
           vy: 5
       }
        
        class Stick{
            constructor(width,height){
                this.x = canvas.width - width/2,
                this.y = canvas.height - height,
                this.width = width,
                this.height = height
            }
        }

var scoreEl = document.querySelector('h3')
var increasingRate = 1
var isHit = false        
var backColor = `rgb(${Math.floor(Math.random()*255)},${Math.floor(Math.random()*255)},${Math.floor(Math.random()*255)},0.2)`
let stick = new Stick(100,20)
var score = 0

let animationId;
startAnimation();
// Define a global variable to store the animation ID

// Function to start the animation loop
function startAnimation() {
    function animate() {
        // Animation logic here
        draw();
        // Call requestAnimationFrame recursively
        animationId = requestAnimationFrame(animate);
    }
    // Start the animation loop
    animate();
}

// Function to stop the animation loop
function stopAnimation() {
    // Call cancelAnimationFrame with the animation ID
    cancelAnimationFrame(animationId);
}

function checkCollioson(){
    
    if( ball.y + ball.radius > stick.y && ball.y + ball.radius < stick.y + ball.vy + 1 && ball.x < stick.x + stick.width && ball.x > stick.x){
        backColor = `rgba(${Math.floor(Math.random()*255)},${Math.floor(Math.random()*255)},${Math.floor(Math.random()*255)},0.1)`
        ball.vy = -(ball.vy += increasingRate)
        ball.vx = (ball.vx += increasingRate / 3)
        increasingRate = increasingRate - increasingRate / 1.5
        //c.fillStyle = backColor
        //c.fillRect(0,0,1080,2100)
        console.log('hsiaoa')
        score++
        scoreEl.innerText = score
    }else if(ball.y + ball.radius > stick.y + stick.height + ball.vy){
       console.log('Game over')
       console.log(animationId)
       stopAnimation(animationId)
    }
}

function draw(){
    
    c.clearRect(ball.x - (ball.radius + 1), ball.y - (ball.radius+1), ball.radius * 2 +5, ball.radius*2 +5)
    
  
    if(ball.x < 0 + ball.radius/2 || ball.x > canvas.width - ball.radius/2){
        ball.vx = -ball.vx 
    }
    
    if(ball.y < 0 + ball.radius/2){
        ball.vy = -ball.vy 
        isHit = false
    }
    
    ball.x += ball.vx
    ball.y += ball.vy
    
    if( ball.y > stick.y - (ball.vy + ball.radius)){
        checkCollioson()
    }
   
   // c.fillStyle = backColor
   // c.fillRect(0,0,1080,2100)
   
    //c.fillStyle = 'brown'
    //c.fillRect(0, stick.y, innerWidth * window.devicePixelRatio, innerHeight * window.devicePixelRatio)
   
    c.fillStyle = 'black';
    c.fillRect(stick.x, stick.y, stick.width, stick.height);
  
    c.beginPath()
    c.arc(ball.x,ball.y,ball.radius,0,Math.PI*2,false)
    c.fillStyle = 'black' 
    c.stroke()
    c.fill()
    c.closePath()
    
}

var lastMove = 0;
var debounceTime = 16;

document.addEventListener('touchmove', (e) => {
   let now = new Date().getTime()
   if(now - lastMove > debounceTime){
       lastMove = now
       c.clearRect(stick.x - 1, stick.y , stick.width + 2, stick.height)
       stick.x = (e.touches[0].clientX ) - stick.width /2;
   }
});

// it for the stick to get smoother movements 


//document.addEventListener('scroll',(e)=>{
//    e.preventDefault()
//})
    </script>
</html>